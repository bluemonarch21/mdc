/* tslint:disable */
/* eslint-disable */
/**
 * MDC
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface FileInfo
 */
export interface FileInfo {
    /**
     * 
     * @type {string}
     * @memberof FileInfo
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof FileInfo
     */
    'filename': string;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface ModelInfo
 */
export interface ModelInfo {
    /**
     * 
     * @type {string}
     * @memberof ModelInfo
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ModelInfo
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface Prediction
 */
export interface Prediction {
    /**
     * 
     * @type {string}
     * @memberof Prediction
     */
    'model': string;
    /**
     * 
     * @type {string}
     * @memberof Prediction
     */
    'input': string;
    /**
     * 
     * @type {number}
     * @memberof Prediction
     */
    'label': number;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<string>}
     * @memberof ValidationError
     */
    'loc': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}

/**
 * FilesApi - axios parameter creator
 * @export
 */
export const FilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get an uploaded file by ID.
         * @summary Read Upload
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadApiV1FilesIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('uploadApiV1FilesIdGet', 'id', id)
            const localVarPath = `/api/v1/files/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Upload a file.
         * @summary Create Upload
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadApiV1FilesPost: async (file: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('uploadApiV1FilesPost', 'file', file)
            const localVarPath = `/api/v1/files/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve uploaded files.
         * @summary Read Uploads
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadsApiV1FilesGet: async (skip?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/files/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilesApi - functional programming interface
 * @export
 */
export const FilesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilesApiAxiosParamCreator(configuration)
    return {
        /**
         * Get an uploaded file by ID.
         * @summary Read Upload
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadApiV1FilesIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadApiV1FilesIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Upload a file.
         * @summary Create Upload
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadApiV1FilesPost(file: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadApiV1FilesPost(file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve uploaded files.
         * @summary Read Uploads
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadsApiV1FilesGet(skip?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FileInfo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadsApiV1FilesGet(skip, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FilesApi - factory interface
 * @export
 */
export const FilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilesApiFp(configuration)
    return {
        /**
         * Get an uploaded file by ID.
         * @summary Read Upload
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadApiV1FilesIdGet(id: string, options?: any): AxiosPromise<any> {
            return localVarFp.uploadApiV1FilesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Upload a file.
         * @summary Create Upload
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadApiV1FilesPost(file: any, options?: any): AxiosPromise<FileInfo> {
            return localVarFp.uploadApiV1FilesPost(file, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve uploaded files.
         * @summary Read Uploads
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadsApiV1FilesGet(skip?: number, limit?: number, options?: any): AxiosPromise<Array<FileInfo>> {
            return localVarFp.uploadsApiV1FilesGet(skip, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FilesApi - object-oriented interface
 * @export
 * @class FilesApi
 * @extends {BaseAPI}
 */
export class FilesApi extends BaseAPI {
    /**
     * Get an uploaded file by ID.
     * @summary Read Upload
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public uploadApiV1FilesIdGet(id: string, options?: AxiosRequestConfig) {
        return FilesApiFp(this.configuration).uploadApiV1FilesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Upload a file.
     * @summary Create Upload
     * @param {any} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public uploadApiV1FilesPost(file: any, options?: AxiosRequestConfig) {
        return FilesApiFp(this.configuration).uploadApiV1FilesPost(file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve uploaded files.
     * @summary Read Uploads
     * @param {number} [skip] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public uploadsApiV1FilesGet(skip?: number, limit?: number, options?: AxiosRequestConfig) {
        return FilesApiFp(this.configuration).uploadsApiV1FilesGet(skip, limit, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ModelsApi - axios parameter creator
 * @export
 */
export const ModelsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve models information.
         * @summary Read Models
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modelsApiV1ModelsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/models/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ModelsApi - functional programming interface
 * @export
 */
export const ModelsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ModelsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve models information.
         * @summary Read Models
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modelsApiV1ModelsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelInfo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modelsApiV1ModelsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ModelsApi - factory interface
 * @export
 */
export const ModelsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ModelsApiFp(configuration)
    return {
        /**
         * Retrieve models information.
         * @summary Read Models
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modelsApiV1ModelsGet(options?: any): AxiosPromise<Array<ModelInfo>> {
            return localVarFp.modelsApiV1ModelsGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ModelsApi - object-oriented interface
 * @export
 * @class ModelsApi
 * @extends {BaseAPI}
 */
export class ModelsApi extends BaseAPI {
    /**
     * Retrieve models information.
     * @summary Read Models
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public modelsApiV1ModelsGet(options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).modelsApiV1ModelsGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PredictApi - axios parameter creator
 * @export
 */
export const PredictApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve prediction of an uploaded file.
         * @summary Read Prediction
         * @param {string} model 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        predictionApiV1PredictGet: async (model: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('predictionApiV1PredictGet', 'model', model)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('predictionApiV1PredictGet', 'id', id)
            const localVarPath = `/api/v1/predict/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (model !== undefined) {
                localVarQueryParameter['model'] = model;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PredictApi - functional programming interface
 * @export
 */
export const PredictApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PredictApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve prediction of an uploaded file.
         * @summary Read Prediction
         * @param {string} model 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async predictionApiV1PredictGet(model: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Prediction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.predictionApiV1PredictGet(model, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PredictApi - factory interface
 * @export
 */
export const PredictApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PredictApiFp(configuration)
    return {
        /**
         * Retrieve prediction of an uploaded file.
         * @summary Read Prediction
         * @param {string} model 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        predictionApiV1PredictGet(model: string, id: string, options?: any): AxiosPromise<Prediction> {
            return localVarFp.predictionApiV1PredictGet(model, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PredictApi - object-oriented interface
 * @export
 * @class PredictApi
 * @extends {BaseAPI}
 */
export class PredictApi extends BaseAPI {
    /**
     * Retrieve prediction of an uploaded file.
     * @summary Read Prediction
     * @param {string} model 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PredictApi
     */
    public predictionApiV1PredictGet(model: string, id: string, options?: AxiosRequestConfig) {
        return PredictApiFp(this.configuration).predictionApiV1PredictGet(model, id, options).then((request) => request(this.axios, this.basePath));
    }
}


